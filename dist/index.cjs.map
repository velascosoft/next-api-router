{"version":3,"sources":["../src/http/decorators/RoutingMapping.ts","../src/http/routing/ApiRouter.ts"],"names":["NextResponse","getReasonPhrase","StatusCodes","pathMatch"],"mappings":"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","file":"index.cjs","sourcesContent":["import { HTTP_METHOD } from \"../../types\";\nimport { Middleware } from \"../middlewares\";\n\nexport interface RouteDefinition {\n    path: string;\n    method: HTTP_METHOD;\n    handlerName: string;\n}\n\nconst routesMetadataKey = Symbol('routes');\nconst routeMiddlewaresKey = Symbol('route_middlewares');\nconst controllerMiddlewaresKey = Symbol('controller_middlewares');\n\nexport function RequestMapping(path: string, method: HTTP_METHOD) {\n    return function (target: any, propertyKey: string) {\n        const routes: RouteDefinition[] = Reflect.getMetadata(routesMetadataKey, target.constructor) || [];\n        routes.push({\n            path,\n            method,\n            handlerName: propertyKey,\n        });\n        Reflect.defineMetadata(routesMetadataKey, routes, target.constructor);\n    };\n}\n\nexport function Use(...middlewares: Middleware[]) {\n    return function (target: any, propertyKey: string) {\n        const map: Record<string, Middleware[]> =\n            Reflect.getMetadata(routeMiddlewaresKey, target.constructor) || {};\n        map[propertyKey] = [...(map[propertyKey] || []), ...middlewares];\n        Reflect.defineMetadata(routeMiddlewaresKey, map, target.constructor);\n    };\n}\n\nexport function UseController(...middlewares: Middleware[]) {\n    return function (constructor: any) {\n        const list: Middleware[] =\n            Reflect.getMetadata(controllerMiddlewaresKey, constructor) || [];\n        Reflect.defineMetadata(controllerMiddlewaresKey, [...list, ...middlewares], constructor);\n    };\n}\n\nexport function getRoutes(target: any): RouteDefinition[] {\n    return Reflect.getMetadata(routesMetadataKey, target.constructor) || [];\n}\n\nexport function getControllerMiddlewares(target: any): Middleware[] {\n    return Reflect.getMetadata(controllerMiddlewaresKey, target.constructor) || [];\n}\n\nexport function getRouteMiddlewares(target: any): Record<string, Middleware[]> {\n    return Reflect.getMetadata(routeMiddlewaresKey, target.constructor) || {};\n}","import { getReasonPhrase, StatusCodes } from \"http-status-codes\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { match as pathMatch } from \"path-to-regexp\";\nimport { Middleware } from \"../middlewares\";\nimport { getControllerMiddlewares, getRouteMiddlewares, getRoutes } from \"../decorators/RoutingMapping\";\nimport { HTTP_METHOD } from '../../types';\n\ntype ErrorHandler = (\n    error: unknown,\n    req: NextRequest,\n    params: Record<string, string>\n) => Promise<NextResponse> | NextResponse;\n\ninterface Route {\n    method: HTTP_METHOD;\n    path: string;\n    matcher: ReturnType<typeof pathMatch>;\n    handlers: Middleware[];\n    onError?: ErrorHandler;\n}\n\nexport interface ApiRouteController {\n    [key: string]: any;\n}\n\nexport class ApiRouter {\n    private routes: Route[] = [];\n    private basePath = '';\n    private globalErrorHandler: ErrorHandler = (err, req) => {\n        const reqPath = req.nextUrl.pathname;\n\n        return NextResponse.json({\n            success: false,\n            message: getReasonPhrase(StatusCodes.INTERNAL_SERVER_ERROR),\n            path: reqPath,\n        }, { status: StatusCodes.INTERNAL_SERVER_ERROR });\n    }\n\n    constructor(basePath = '', controller: ApiRouteController) {\n        this.basePath = basePath;\n\n        const controllerRoutes = getRoutes(controller);\n        const classMiddlewares = getControllerMiddlewares(controller);\n        const routeMwsMap = getRouteMiddlewares(controller);\n\n        for (const route of controllerRoutes) {\n            const fullPath = `${this.basePath}${route.path}`.replace(/\\/+$/, '');\n            const matcher = pathMatch(fullPath, { decode: decodeURIComponent });\n            const handler: Middleware = controller[route.handlerName].bind(controller);\n\n            const methodMiddlewares = routeMwsMap[route.handlerName] || [];\n\n            this.routes.push({\n                method: route.method,\n                path: fullPath,\n                matcher,\n                handlers: [...classMiddlewares, ...methodMiddlewares, handler],\n            })\n        }\n    }\n\n    onError(handler: ErrorHandler) {\n        this.globalErrorHandler = handler;\n    }\n\n    async handle(req: NextRequest): Promise<NextResponse> {\n        const reqMethod = req.method?.toUpperCase();\n        const reqPath = req.nextUrl.pathname.replace(/^\\/api/, '');\n\n        for (const route of this.routes) {\n            if (route.method !== reqMethod) continue;\n            const match = route.matcher(reqPath);\n            if (match) {\n                const params = match.params as Record<string, string>;\n                const stack = [...route.handlers];\n\n                const execute = async (i: number): Promise<NextResponse> => {\n                    if (i < stack.length - 1) {\n                        return stack[i](req, params, () => execute(i + 1));\n                    }\n                    return stack[i](req, params, () => execute(i));\n                };\n\n                try {\n                    return await execute(0);\n                } catch (err) {\n                    if (route.onError) {\n                        return await route.onError(err, req, params);\n                    }\n                    if (this.globalErrorHandler) {\n                        return await this.globalErrorHandler(err, req, params);\n                    }\n\n                    return NextResponse.json({\n                        success: false,\n                        message: getReasonPhrase(StatusCodes.INTERNAL_SERVER_ERROR)\n                    }, { status: StatusCodes.INTERNAL_SERVER_ERROR });\n                }\n            }\n        }\n\n        return NextResponse.json({ sucess: false, message: 'Not Found' }, { status: StatusCodes.NOT_FOUND });\n    }\n}"]}